return {
	-- tools
	{
		"williamboman/mason.nvim",
		opts = function(_, opts)
			vim.list_extend(opts.ensure_installed, {
				"stylua",
				"selene",
				"luacheck",
				"shellcheck",
				"shfmt",
				"tailwindcss-language-server",
				"typescript-language-server",
				"css-lsp",
			})
		end,
	},

	-- lsp servers
	{
		"neovim/nvim-lspconfig",
		opts = {
			inlay_hints = { enabled = false },
			---@type lspconfig.options
			servers = {
				cssls = {},
				tailwindcss = {
					root_dir = function(...)
						return require("lspconfig.util").root_pattern(".git")(...)
					end,
				},
				tsserver = {
					-- root_dir = function(...)
					-- 	return require("lspconfig.util").root_pattern(".git")(...)
					-- end,
					single_file_support = true,
					settings = {
						typescript = {
							inlayHints = {
								includeInlayParameterNameHints = "literal",
								includeInlayParameterNameHintsWhenArgumentMatchesName = false,
								includeInlayFunctionParameterTypeHints = true,
								includeInlayVariableTypeHints = false,
								includeInlayPropertyDeclarationTypeHints = true,
								includeInlayFunctionLikeReturnTypeHints = true,
								includeInlayEnumMemberValueHints = true,
							},
						},
						javascript = {
							inlayHints = {
								includeInlayParameterNameHints = "all",
								includeInlayParameterNameHintsWhenArgumentMatchesName = false,
								includeInlayFunctionParameterTypeHints = true,
								includeInlayVariableTypeHints = true,
								includeInlayPropertyDeclarationTypeHints = true,
								includeInlayFunctionLikeReturnTypeHints = true,
								includeInlayEnumMemberValueHints = true,
							},
						},
					},
				},
				pyright = {
					default_config = {
						cmd = { "pyright-langserver", "--stdio" },
						-- require("coding"),
						filetypes = { "python" },
						single_file_support = true,
						settings = {
							python = {
								analysis = {
									autoSearchPaths = true,
									useLibraryCodeForTypes = true,
									diagnosticMode = "openFilesOnly",
								},
							},
						},
					},
				},
				html = {},
				yamlls = {
					settings = {
						yaml = {
							keyOrdering = false,
						},
					},
				},
				lua_ls = {
					-- enabled = false,
					single_file_support = true,
					settings = {
						Lua = {
							workspace = {
								checkThirdParty = false,
							},
							completion = {
								workspaceWord = true,
								callSnippet = "Both",
							},
							misc = {
								parameters = {
									-- "--log-level=trace",
								},
							},
							hint = {
								enable = true,
								setType = false,
								paramType = true,
								paramName = "Disable",
								semicolon = "Disable",
								arrayIndex = "Disable",
							},
							doc = {
								privateName = { "^_" },
							},
							type = {
								castNumberToInteger = true,
							},
							diagnostics = {
								disable = { "incomplete-signature-doc", "trailing-space" },
								-- enable = false,
								groupSeverity = {
									strong = "Warning",
									strict = "Warning",
								},
								groupFileStatus = {
									["ambiguity"] = "Opened",
									["await"] = "Opened",
									["codestyle"] = "None",
									["duplicate"] = "Opened",
									["global"] = "Opened",
									["luadoc"] = "Opened",
									["redefined"] = "Opened",
									["strict"] = "Opened",
									["strong"] = "Opened",
									["type-check"] = "Opened",
									["unbalanced"] = "Opened",
									["unused"] = "Opened",
								},
								unusedLocalExclude = { "_*" },
							},
							format = {
								enable = false,
								defaultConfig = {
									indent_style = "space",
									indent_size = "2",
									continuation_indent_size = "2",
								},
							},
						},
					},
				},
			},
			setup = {},
		},
	},
	-- {
	-- 	"nvimtools/none-ls.nvim",
	-- 	event = { "BufReadPre", "BufNewFile" },
	-- 	dependencies = { "mason.nvim" },
	-- 	opts = function()
	-- 		local nls = require("null-ls")
	--
	-- 		local augroup = vim.api.nvim_create_augroup("LspFormatting", {})
	--
	-- 		local lsp_formatting = function(bufnr)
	-- 			vim.lsp.buf.format({
	-- 				filter = function(client)
	-- 					return client.name == "null-ls"
	-- 				end,
	-- 				bufnr = bufnr,
	-- 			})
	-- 		end
	--
	-- 		nls.setup({
	-- 			sources = {
	-- 				nls.builtins.formatting.stylua,
	-- 				-- nls.builtins.formatting.black,
	-- 				nls.builtins.diagnostics.fish,
	-- 			},
	-- 			on_attach = function(client, bufnr)
	-- 				if client.supports_method("textDocument/formatting") then
	-- 					vim.api.nvim_clear_autocmds({ group = augroup, buffer = bufnr })
	-- 					vim.api.nvim_create_autocmd("BufWritePre", {
	-- 						group = augroup,
	-- 						buffer = bufnr,
	-- 						callback = function()
	-- 							lsp_formatting(bufnr)
	-- 						end,
	-- 					})
	-- 				end
	-- 			end,
	-- 		})
	--
	-- 		vim.api.nvim_create_user_command("DisableLspFormatting", function()
	-- 			vim.api.nvim_clear_autocmds({ group = augroup, buffer = 0 })
	-- 		end, { nargs = 0 })
	--
	-- 		return {
	-- 			root_dir = require("null-ls.utils").root_pattern(".null-ls-root", ".neoconf.json", "Makefile", ".git"),
	-- 			sources = {
	-- 				nls.builtins.formatting.fish_indent,
	-- 				nls.builtins.diagnostics.fish,
	-- 				nls.builtins.formatting.stylua,
	-- 				-- nls.builtins.formatting.black,
	-- 				nls.builtins.formatting.shfmt,
	-- 				-- nls.builtins.diagnostics.flake8,
	-- 			},
	-- 		}
	-- 	end,
	-- },
}
